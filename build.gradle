plugins {
    id 'application'
    id 'checkstyle'
    id 'org.springframework.boot' version '3.0.6'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'jacoco'
    id 'org.liquibase.gradle' version '2.2.0'
    // Сборщик фронтенда
    id 'org.siouan.frontend-jdk11' version '6.0.0'
}

group = 'hexlet.code'
version = '1.0-SNAPSHOT'
sourceCompatibility = '17'
targetCompatibility = 17

compileJava {
    options.release = 17
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.26'

    annotationProcessor(
            'org.projectlombok:lombok:1.18.26',
            'com.querydsl:querydsl-apt:5.0.0:jakarta',
            'jakarta.persistence:jakarta.persistence-api:3.1.0'
    )

    implementation(
            'org.springframework.boot:spring-boot-starter-web:3.1.0',
            'org.springframework.boot:spring-boot-starter-actuator:3.1.0',
            'org.springframework.boot:spring-boot-starter-data-jpa:3.0.4',
            'org.springframework.boot:spring-boot-starter-validation:3.0.4',
            'org.springframework.boot:spring-boot-starter-security:3.0.4',
            'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0',
            'com.rollbar:rollbar-spring-boot3-webmvc:1.10.0',

            'io.jsonwebtoken:jjwt:0.9.1',
            'org.liquibase:liquibase-core:4.20.0',
            'com.querydsl:querydsl-jpa:5.0.0:jakarta',
    )

    liquibaseRuntime(
            sourceSets.main.output,
            'org.liquibase:liquibase-core:4.20.0',
            'info.picocli:picocli:4.7.3',
            'org.liquibase.ext:liquibase-hibernate6:4.21.1',
            'org.springframework.boot:spring-boot-starter-data-jpa:3.0.4',
            'com.h2database:h2',
    )

    runtimeOnly (
            'com.h2database:h2:2.1.214',
            'org.postgresql:postgresql:42.6.0'
    )

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.0.4'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:3.1.0'
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = true
    }
}

diffChangelog {
    dependsOn compileJava
}

// Настраиваем Liquibase
liquibase {
    activities {
        main {
            // Указываем путь, по которому будет сгенерирован файл миграции
            changelogFile 'src/main/resources/db/changelog/db.changelog-master.yaml'
            // Указывем источник, с которым будут сравниваться изменения
            // Это база данных, изначально она пустая
            url 'jdbc:h2:./taskManager'
            // Сравниваем с моделями, задавая пакет
            referenceUrl 'hibernate:spring:hexlet.code.model.' +
                    // Указываем диалект
                    '?dialect=org.hibernate.dialect.H2Dialect' +
                    // Указываем правила именования таблиц и столбцов,
                    // чтобы они соответствовали правилам Spring
                    '&hibernate.physical_naming_strategy=org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy'
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

// Сборка фронтенда.
// Выполняется только если ничего не изменилось.
// *****************************************************************************
frontend {
    nodeVersion = '16.13.1'
    installScript = 'install'
    assembleScript = 'run build'
    packageJsonDirectory = file("${projectDir}/frontend")
}

def configFrontendTasks = {
    inputs.files(fileTree("$projectDir/frontend").exclude('build', 'node_modules'))
    outputs.dir("$buildDir/resources/main/static")
}

assembleFrontend {
    configure configFrontendTasks

    doLast {
        copy {
            from "$projectDir/frontend/build"
            into "$buildDir/resources/main/static"
        }
    }
}

installFrontend {
    configure configFrontendTasks
}

processResources.dependsOn assembleFrontend
// *****************************************************************************


task stage(dependsOn: [clean, installDist])
installDist.mustRunAfter clean